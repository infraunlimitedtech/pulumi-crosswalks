// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v3/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Peer is a WireGuard peer that should have access to the VPN.
type Peer struct {
	pulumi.CustomResourceState

	ApiVersion pulumi.StringPtrOutput     `pulumi:"apiVersion"`
	Kind       pulumi.StringPtrOutput     `pulumi:"kind"`
	Metadata   metav1.ObjectMetaPtrOutput `pulumi:"metadata"`
	// Specification of the desired behavior of the Kilo Peer. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#spec-and-status
	Spec PeerSpecOutput `pulumi:"spec"`
}

// NewPeer registers a new resource with the given unique name, arguments, and options.
func NewPeer(ctx *pulumi.Context,
	name string, args *PeerArgs, opts ...pulumi.ResourceOption) (*Peer, error) {
	if args == nil {
		args = &PeerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("kilo.squat.ai/v1alpha1")
	args.Kind = pulumi.StringPtr("Peer")
	var resource Peer
	err := ctx.RegisterResource("kubernetes:kilo.squat.ai/v1alpha1:Peer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeer gets an existing Peer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeerState, opts ...pulumi.ResourceOption) (*Peer, error) {
	var resource Peer
	err := ctx.ReadResource("kubernetes:kilo.squat.ai/v1alpha1:Peer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Peer resources.
type peerState struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the Kilo Peer. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#spec-and-status
	Spec *PeerSpec `pulumi:"spec"`
}

type PeerState struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Specification of the desired behavior of the Kilo Peer. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#spec-and-status
	Spec PeerSpecPtrInput
}

func (PeerState) ElementType() reflect.Type {
	return reflect.TypeOf((*peerState)(nil)).Elem()
}

type peerArgs struct {
	ApiVersion *string            `pulumi:"apiVersion"`
	Kind       *string            `pulumi:"kind"`
	Metadata   *metav1.ObjectMeta `pulumi:"metadata"`
	// Specification of the desired behavior of the Kilo Peer. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#spec-and-status
	Spec *PeerSpec `pulumi:"spec"`
}

// The set of arguments for constructing a Peer resource.
type PeerArgs struct {
	ApiVersion pulumi.StringPtrInput
	Kind       pulumi.StringPtrInput
	Metadata   metav1.ObjectMetaPtrInput
	// Specification of the desired behavior of the Kilo Peer. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#spec-and-status
	Spec PeerSpecPtrInput
}

func (PeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peerArgs)(nil)).Elem()
}

type PeerInput interface {
	pulumi.Input

	ToPeerOutput() PeerOutput
	ToPeerOutputWithContext(ctx context.Context) PeerOutput
}

func (*Peer) ElementType() reflect.Type {
	return reflect.TypeOf((*Peer)(nil))
}

func (i *Peer) ToPeerOutput() PeerOutput {
	return i.ToPeerOutputWithContext(context.Background())
}

func (i *Peer) ToPeerOutputWithContext(ctx context.Context) PeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerOutput)
}

type PeerOutput struct {
	*pulumi.OutputState
}

func (PeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Peer)(nil))
}

func (o PeerOutput) ToPeerOutput() PeerOutput {
	return o
}

func (o PeerOutput) ToPeerOutputWithContext(ctx context.Context) PeerOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(PeerOutput{})
}
